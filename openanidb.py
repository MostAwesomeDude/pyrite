#!/usr/bin/env python
############################################################################
#    Copyright (C) 2007 by Corbin Simpson                                  #
#    MostAwesomeDude@gmail.com                                             #
#                                                                          #
#    This program is free software; you can redistribute it and/or modify  #
#    it under the terms of the GNU General Public License as published by  #
#    the Free Software Foundation; either version 2 of the License, or     #
#    (at your option) any later version.                                   #
#                                                                          #
#    This program is distributed in the hope that it will be useful,       #
#    but WITHOUT ANY WARRANTY; without even the implied warranty of        #
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         #
#    GNU General Public License for more details.                          #
#                                                                          #
#    You should have received a copy of the GNU General Public License     #
#    along with this program; if not, write to the                         #
#    Free Software Foundation, Inc.,                                       #
#    59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.             #
############################################################################
# -*- coding: ANSI_X3.4-1968 -*-
# generated by wxGlade 0.4.1 on Fri May 25 18:42:07 2007

import Queue
import sys
import time
import wx

import config
import db
import udp
import hash

class settingsdialog(wx.Dialog):
    def __init__(self, *args, **kwds):
    self.conf = kwds["conf"]
    del kwds["conf"]
        # begin wxGlade: settingsdialog.__init__
        kwds["style"] = wx.DEFAULT_DIALOG_STYLE
        wx.Dialog.__init__(self, *args, **kwds)
        self.display_staticbox = wx.StaticBox(self, -1, "Display")
        self.actions_staticbox = wx.StaticBox(self, -1, "Actions")
        self.languages_staticbox = wx.StaticBox(self, -1, "Languages")
        self.englishanime = wx.CheckBox(self, -1, "Prefer English titles\nfor anime")
        self.englisheps = wx.CheckBox(self, -1, "Prefer English titles\nfor episodes")
        self.donothinglabel = wx.StaticText(self, -1, "Do nothing:")
        self.donothing = wx.TextCtrl(self, -1, "")
        self.apply = wx.Button(self, -1, "Apply")
        self.revert = wx.Button(self, -1, "Revert")
        self.close = wx.Button(self, wx.ID_OK, "Close")

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_BUTTON, self.apply_settings, self.apply)
        self.Bind(wx.EVT_BUTTON, self.revert_settings, self.revert)
        # end wxGlade
    self.boxdic = {"english.anime": self.englishanime, "english.eps": self.englisheps}
    self.revert_settings(None)

    def __set_properties(self):
        # begin wxGlade: settingsdialog.__set_properties
        self.SetTitle("Settings")
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: settingsdialog.__do_layout
        sizer_7 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_11 = wx.BoxSizer(wx.VERTICAL)
        actions = wx.StaticBoxSizer(self.actions_staticbox, wx.HORIZONTAL)
        sizer_8 = wx.BoxSizer(wx.VERTICAL)
        display = wx.StaticBoxSizer(self.display_staticbox, wx.VERTICAL)
        languages = wx.StaticBoxSizer(self.languages_staticbox, wx.HORIZONTAL)
        languages.Add(self.englishanime, 0, wx.ADJUST_MINSIZE, 0)
        languages.Add(self.englisheps, 0, wx.ADJUST_MINSIZE, 0)
        sizer_8.Add(languages, 1, wx.EXPAND, 0)
        display.Add(self.donothinglabel, 0, wx.ADJUST_MINSIZE, 0)
        display.Add(self.donothing, 0, wx.EXPAND|wx.ALIGN_RIGHT|wx.ADJUST_MINSIZE, 0)
        sizer_8.Add(display, 1, wx.EXPAND, 0)
        sizer_7.Add(sizer_8, 1, wx.EXPAND, 0)
        actions.Add(self.apply, 0, wx.ADJUST_MINSIZE, 0)
        actions.Add(self.revert, 0, wx.ADJUST_MINSIZE, 0)
        actions.Add(self.close, 0, wx.ADJUST_MINSIZE, 0)
        sizer_11.Add(actions, 0, wx.EXPAND, 0)
        sizer_7.Add(sizer_11, 0, wx.EXPAND, 0)
        self.SetAutoLayout(True)
        self.SetSizer(sizer_7)
        sizer_7.Fit(self)
        sizer_7.SetSizeHints(self)
        self.Layout()
        # end wxGlade

    def apply_settings(self, event): # wxGlade: settingsdialog.<event_handler>
        print "Applying settings..."
    for label, box in self.boxdic.iteritems():
        self.conf.set(label, box.IsChecked())
    self.conf.save()

    def revert_settings(self, event): # wxGlade: settingsdialog.<event_handler>
        print "Reverting settings..."
    self.conf.reload()
    for label, box in self.boxdic.iteritems():
        setting = self.conf.get(label)
        if setting != None:
            box.SetValue(self.conf.get(label))
        else:
            # This means a damaged or missing config file!
            self.conf.set(label, box.GetValue())

# end of class settingsdialog

class oaframe(wx.Frame):
    def __init__(self, *args, **kwds):
        # begin wxGlade: oaframe.__init__
        kwds["style"] = wx.DEFAULT_FRAME_STYLE
        wx.Frame.__init__(self, *args, **kwds)
        self.notebook1 = wx.Notebook(self, -1, style=0)
        self.addfile = wx.Panel(self.notebook1, -1)
        self.localdb = wx.Panel(self.notebook1, -1)
        self.anime = wx.Panel(self.notebook1, -1)
        self.main = wx.Panel(self.notebook1, -1)
        
        # Menu Bar
        self.menubar = wx.MenuBar()
        self.SetMenuBar(self.menubar)
        wxglade_tmp_menu = wx.Menu()
        wxglade_tmp_menu.Append(wx.ID_EXIT, "Exit", "", wx.ITEM_NORMAL)
        self.menubar.Append(wxglade_tmp_menu, "AniDB")
        wxglade_tmp_menu = wx.Menu()
        wxglade_tmp_menu.Append(wx.ID_PREFERENCES, "Settings", "", wx.ITEM_NORMAL)
        self.menubar.Append(wxglade_tmp_menu, "Settings")
        wxglade_tmp_menu = wx.Menu()
        wxglade_tmp_menu.Append(wx.ID_ABOUT, "About", "", wx.ITEM_NORMAL)
        self.menubar.Append(wxglade_tmp_menu, "Help")
        # Menu Bar end
        self.statusbar = self.CreateStatusBar(2, 0)
        self.intro = wx.StaticText(self.main, -1, "Welcome to OpenAniDB. Current\nclient version is 1 and current\nprotocol version is 3.")
        self.label_user = wx.StaticText(self.main, -1, "Username:", style=wx.ALIGN_CENTRE)
        self.label_pass = wx.StaticText(self.main, -1, "Password:", style=wx.ALIGN_CENTRE)
        self.username_box = wx.TextCtrl(self.main, -1, "")
        self.password_box = wx.TextCtrl(self.main, -1, "", style=wx.TE_PASSWORD)
        self.login = wx.Button(self.main, -1, "Login", style=wx.BU_EXACTFIT)
        self.logout = wx.Button(self.main, -1, "Logout", style=wx.BU_EXACTFIT)
        self.search_anime = wx.StaticText(self.anime, -1, "Search for anime by name or\nanime ID (aid).")
        self.aname = wx.StaticText(self.anime, -1, "Anime name:")
        self.aid = wx.StaticText(self.anime, -1, "Anime ID:")
        self.aname_box = wx.TextCtrl(self.anime, -1, "")
        self.aid_box = wx.TextCtrl(self.anime, -1, "")
        self.anime_search = wx.Button(self.anime, -1, "Search!")
        self.anime_results = wx.TextCtrl(self.anime, -1, "", style=wx.TE_MULTILINE|wx.TE_READONLY|wx.TE_RICH|wx.TE_AUTO_URL)
        self.tree = wx.TreeCtrl(self.localdb, -1, style=wx.TR_HAS_BUTTONS|wx.TR_NO_LINES|wx.TR_HIDE_ROOT|wx.TR_DEFAULT_STYLE|wx.SUNKEN_BORDER)
        self.tablechoose = wx.Choice(self.localdb, -1, choices=["Local AniDB (by ID)", "Local AniDB (by name)"])
        self.refresh = wx.Button(self.localdb, -1, "Load")
        self.browse = wx.Button(self.addfile, -1, "Browse...")
        self.filelist = wx.ListCtrl(self.addfile, -1, style=wx.LC_REPORT|wx.SUNKEN_BORDER)
        self.starthashing = wx.ToggleButton(self.addfile, -1, "Start Hashing Process")

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_MENU, self.quit, id=wx.ID_EXIT)
        self.Bind(wx.EVT_MENU, self.show_settings, id=wx.ID_PREFERENCES)
        self.Bind(wx.EVT_MENU, self.about, id=wx.ID_ABOUT)
        self.Bind(wx.EVT_TEXT_ENTER, self.gui_login, self.username_box)
        self.Bind(wx.EVT_TEXT_ENTER, self.gui_login, self.password_box)
        self.Bind(wx.EVT_BUTTON, self.gui_login, self.login)
        self.Bind(wx.EVT_BUTTON, self.gui_logout, self.logout)
        self.Bind(wx.EVT_TEXT_ENTER, self.gui_anime, self.aname_box)
        self.Bind(wx.EVT_TEXT_ENTER, self.gui_anime, self.aid_box)
        self.Bind(wx.EVT_BUTTON, self.gui_anime, self.anime_search)
        self.Bind(wx.EVT_BUTTON, self.gui_refresh, self.refresh)
        self.Bind(wx.EVT_BUTTON, self.gui_filebrowse, self.browse)
        self.Bind(wx.EVT_TOGGLEBUTTON, self.gui_hash, self.starthashing)
        # end wxGlade
    # Tree events
    self.Bind(wx.EVT_TREE_ITEM_RIGHT_CLICK, self.gui_tree_rc, self.tree)
    self.Bind(wx.EVT_CLOSE, self.quit, self)
    
    # This sets up all the global shit we might need
    # UDP socket (the one and only)
    # self.sock = udp.udpsock()
    # UDP thread (the one and only)
    self.outbound = Queue.Queue(10)
    self.inbound = Queue.Queue(5)
    self.udpthread = udp.udpthread(self.outbound, self.inbound, self.statusbar)
    self.udpthread.setDaemon(True)
    self.udpthread.start()
    # Session ID
    # If None, not logged in. Else, logged in. Remember that.
    self.ssid = None
    # Initialize the tree, ignore the returned root
    self.tree.AddRoot("!root")
    # Initialize the list
    self.filelist.InsertColumn(0, "File name", wx.LIST_FORMAT_CENTER, -1)
    # Settings
    self.conf = config.config()

    def __set_properties(self):
        # begin wxGlade: oaframe.__set_properties
        self.SetTitle("OpenAniDB")
        self.SetSize((400, 500))
        self.statusbar.SetStatusWidths([-1, 100])
        # statusbar fields
        statusbar_fields = ["OpenAniDB version 0.2", "Loading..."]
        for i in range(len(statusbar_fields)):
            self.statusbar.SetStatusText(statusbar_fields[i], i)
        self.logout.Enable(False)
        self.tablechoose.SetSelection(0)
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: oaframe.__do_layout
        sizer1 = wx.BoxSizer(wx.VERTICAL)
        sizer_6 = wx.BoxSizer(wx.VERTICAL)
        sizer_10 = wx.BoxSizer(wx.VERTICAL)
        sizer_5 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_3 = wx.BoxSizer(wx.VERTICAL)
        sizer_4 = wx.BoxSizer(wx.HORIZONTAL)
        grid_sizer_2 = wx.GridSizer(2, 2, 0, 0)
        sizer_1 = wx.BoxSizer(wx.VERTICAL)
        sizer_2 = wx.BoxSizer(wx.HORIZONTAL)
        grid_sizer_1 = wx.GridSizer(2, 3, 0, 0)
        sizer_1.Add(self.intro, 0, wx.EXPAND|wx.ADJUST_MINSIZE, 0)
        sizer_1.Add((20, 30), 0, wx.ADJUST_MINSIZE, 0)
        grid_sizer_1.Add(self.label_user, 0, wx.ADJUST_MINSIZE, 0)
        grid_sizer_1.Add(self.label_pass, 0, wx.ADJUST_MINSIZE, 0)
        grid_sizer_1.Add((50, 20), 0, wx.ADJUST_MINSIZE, 0)
        grid_sizer_1.Add(self.username_box, 0, wx.ADJUST_MINSIZE, 0)
        grid_sizer_1.Add(self.password_box, 0, wx.ADJUST_MINSIZE, 0)
        grid_sizer_1.Add((50, 20), 0, wx.ADJUST_MINSIZE, 0)
        sizer_1.Add(grid_sizer_1, 1, wx.EXPAND, 0)
        sizer_2.Add(self.login, 0, wx.ADJUST_MINSIZE, 0)
        sizer_2.Add(self.logout, 0, wx.ALIGN_RIGHT|wx.ADJUST_MINSIZE, 0)
        sizer_2.Add((100, 20), 0, wx.ADJUST_MINSIZE, 0)
        sizer_1.Add(sizer_2, 1, wx.EXPAND, 0)
        self.main.SetAutoLayout(True)
        self.main.SetSizer(sizer_1)
        sizer_1.Fit(self.main)
        sizer_1.SetSizeHints(self.main)
        sizer_3.Add(self.search_anime, 0, wx.ADJUST_MINSIZE, 0)
        grid_sizer_2.Add(self.aname, 0, wx.ADJUST_MINSIZE, 0)
        grid_sizer_2.Add(self.aid, 0, wx.ADJUST_MINSIZE, 0)
        grid_sizer_2.Add(self.aname_box, 0, wx.ADJUST_MINSIZE, 0)
        grid_sizer_2.Add(self.aid_box, 0, wx.ADJUST_MINSIZE, 0)
        sizer_3.Add(grid_sizer_2, 0, wx.EXPAND, 0)
        sizer_4.Add(self.anime_search, 0, wx.ADJUST_MINSIZE, 0)
        sizer_4.Add((20, 20), 0, wx.ADJUST_MINSIZE, 0)
        sizer_3.Add(sizer_4, 0, wx.EXPAND, 0)
        sizer_3.Add(self.anime_results, 1, wx.EXPAND|wx.ADJUST_MINSIZE, 0)
        self.anime.SetAutoLayout(True)
        self.anime.SetSizer(sizer_3)
        sizer_3.Fit(self.anime)
        sizer_3.SetSizeHints(self.anime)
        sizer_10.Add(self.tree, 1, wx.EXPAND|wx.ADJUST_MINSIZE, 0)
        sizer_5.Add(self.tablechoose, 0, wx.ALIGN_CENTER_HORIZONTAL|wx.ADJUST_MINSIZE, 0)
        sizer_5.Add(self.refresh, 0, wx.ADJUST_MINSIZE, 0)
        sizer_10.Add(sizer_5, 0, wx.SHAPED|wx.ADJUST_MINSIZE, 0)
        self.localdb.SetAutoLayout(True)
        self.localdb.SetSizer(sizer_10)
        sizer_10.Fit(self.localdb)
        sizer_10.SetSizeHints(self.localdb)
        sizer_6.Add(self.browse, 0, wx.EXPAND|wx.ALIGN_CENTER_HORIZONTAL|wx.ADJUST_MINSIZE, 0)
        sizer_6.Add(self.filelist, 1, wx.EXPAND, 0)
        sizer_6.Add(self.starthashing, 0, wx.EXPAND|wx.ALIGN_CENTER_HORIZONTAL|wx.SHAPED|wx.ADJUST_MINSIZE, 0)
        self.addfile.SetAutoLayout(True)
        self.addfile.SetSizer(sizer_6)
        sizer_6.Fit(self.addfile)
        sizer_6.SetSizeHints(self.addfile)
        self.notebook1.AddPage(self.main, "Main")
        self.notebook1.AddPage(self.anime, "Anime Search")
        self.notebook1.AddPage(self.localdb, "Local AniDB")
        self.notebook1.AddPage(self.addfile, "Add File")
        sizer1.Add(self.notebook1, 1, wx.EXPAND, 0)
        self.SetAutoLayout(True)
        self.SetSizer(sizer1)
        self.Layout()
        # end wxGlade

    def derror(self, message):
        '''As the name suggests, this pops up an error dialog.
    In my infinite wisdom, I also decree that this function
    shall print to the console as well.'''
    wx.MessageBox(message, "Error")
    print "Error:", message

    def about(self, event): # wxGlade: oaframe.<event_handler>
        print "Showing 'About...' box..."
    wx.MessageBox("OpenAniDB (OADB) is a simple interface to the Anime Database (AniDB).\n\nIt is written in Python, with an emphasis on\nreadable source code and programmer sanity.\n\nIt is eternally under development,\nand commentary is always welcome.\n\nProgrammer: Corbin Simpson <MostAwesomeDude@gmail.com>\n", "About OADB", wx.OK + wx.ICON_INFORMATION)

    def quit(self, event): # wxGlade: oaframe.<event_handler>
        print "Quitting..."
    # Cleanup is good.
    if self.ssid != None:
        # Logout
        self.gui_logout(event)
    self.Destroy()
        sys.exit()

    def gui_login(self, event): # wxGlade: oaframe.<event_handler>
        print "Logging in..."
    if self.ssid != None:
        # Already logged in, dumbass.
        self.derror("Already logged in.")
        return
        if udp.ping(self.outbound, self.inbound):
        wx.BeginBusyCursor()
        user = self.username_box.GetValue()
        passwd = self.password_box.GetValue()
        self.ssid = udp.login(self.outbound, self.inbound, user, passwd)
        wx.EndBusyCursor()
        if self.ssid == None:
            self.derror("Incorrect username or password.")
        else:
            # We're in.
            self.login.Enable(False)
            self.logout.Enable(True)
            print "Changing encoding..."
            if not udp.encoding(self.outbound, self.inbound, self.ssid):
                self.derror("Warning: Couldn't negotiate Unicode encoding;\nJapanese characters may not appear correctly on Windows.")
    else:
        self.derror("AniDB not responding. Try again in a minute.")

    def gui_logout(self, event): # wxGlade: oaframe.<event_handler>
        print "Logging out..."
        if self.ssid == None:
        # XD, we're not logged in!
        self.derror("Not currently logged in.")
    if udp.logout(self.outbound, self.inbound, self.ssid):
        # Okay, we're outa da Matrix...
        self.ssid = None
        self.login.Enable(True)
        self.logout.Enable(False)
    else:
        # Shit?!?
        self.derror("Could not log out.")

    def gui_anime(self, event): # wxGlade: oaframe.<event_handler>
        print "Starting anime search..."
    aname = self.aname_box.GetValue()
    try:
        aid = int(self.aid_box.GetValue())
    except ValueError:
        aid = 0
    self.anime_results.Clear()
    wx.BeginBusyCursor()
    results = udp.anime(self.outbound, self.inbound, self.ssid, aid, aname)
    wx.EndBusyCursor()
    if results != None:
        # Hit!
        # Formatting...
        results = [unicode(i) for i in results]
        self.aname_box.Clear()
        self.aid_box.Clear()
        # {0}|{1}|{2}|{3}|{4}|{5}|{6}|{7}|{int4 review rating average}|{int4 reviews}|{10}|{11}|{12}|{13}|{14}|{15}|{str short names}|{str synonyms}|{str category list}|{19}
        self.anime_results.AppendText("Name: " + results[12] + "\n")
        self.anime_results.AppendText("Kanji: " + results[13] + "\n")
        self.anime_results.AppendText("English: " + results[14] + "\n")
        self.anime_results.AppendText("Anime ID: " + results[0] + "\n")
        self.anime_results.AppendText("AniDB link: http://anidb.info/a" + results[0] + "\n")
        self.anime_results.AppendText("Year: " + results[10] + " (" + results[11] + ")\n")
        self.anime_results.AppendText("(Other languages: " + results[15] + ")\n")
        self.anime_results.AppendText("Episodes: " + results[1] + " (" + results[2] + " normal, " + results[3] + " special)\n")
        self.anime_results.AppendText("Rating: " + results[4] + " (" + results[5] + " votes)\n")
        self.anime_results.AppendText("(Temporary rating: " + results[4] + " (" + results[5] + " votes))\n")
        self.anime_results.AppendText("\nFrom cache: " + results[19])
    else:
        self.anime_results.AppendText("No results, sorry.")
        self.derror("No results found.")

    def gui_refresh(self, event): # wxGlade: oaframe.<event_handler>
        print "Refreshing database tree..."
    '''Lemme explain how this new loop works. We iterate internally
    through all eps for each anime, and then through all files for each
    ep, crossing off results from each array as they match.'''
    # This flag, if set, will recall this event at the end of execution.
    unclean = False
    choice = self.tablechoose.GetSelection()
    if choice == 0 or choice == 1:
        # Entire cache, sorted as desired
        animes = db.allanime(choice)
        eps = db.alleps(choice)
    files = db.allfiles()
    # Clear the tree, and then repopulate
    wx.BeginBusyCursor()
    root = self.tree.GetRootItem()
    animebranches = []
    self.tree.DeleteChildren(root)
    # Display anime names in English if possible?
    englishanime = self.conf.get("english.anime")
    englisheps = self.conf.get("english.eps")
    for anime in animes:
        # Soo much casting...
        if (englishanime and anime['english'] != '') or anime['romaji'] == '':
            branch = self.tree.AppendItem(root, anime['english'] + " (" + str(anime['aid']) + ")")
        else:
            branch = self.tree.AppendItem(root, anime['romaji'] + " (" + str(anime['aid']) + ")")
        self.tree.SetItemPyData(branch, ("a", anime['aid']))
        animebranches.append(branch)
        # Yes, this is for() each episode in the anime.
        for i in range(1, int(anime['epcount'])):
            leaf = self.tree.AppendItem(branch, "Episode " + str(i))
            # "ue" is "unknown episode"
            self.tree.SetItemPyData(leaf, ("ue", (anime['aid'], i)))
            for ep in eps:
                # Does aid match?
                if ep['aid'] == anime['aid'] and ep['epno'] == i:
                    # Hit!
                    if (englisheps and ep['english'] != '') or ep['romaji'] == '':
                        self.tree.SetItemText(leaf, ep['english'])
                    else:
                        self.tree.SetItemText(leaf, ep['romaji'])
                    self.tree.SetItemPyData(leaf, ("e", ep['eid']))
                    del eps[eps.index(ep)]
                    for file in files:
                        # First, does aid match?
                        if file['aid'] == anime['aid']:
                            # Second, does eid match?
                            if file['eid'] == ep['eid']:
                                # Hit!
                                fileleaf = self.tree.AppendItem(leaf, "file " + str(file['fid']))
                                self.tree.SetItemPyData(fileleaf, ("f", file['fid']))
                                del files[files.index(file)]
                    break
    # Restore control
    wx.EndBusyCursor()
    # results SHOULD be empty, XD...
    if eps != []:
        unclean = True
        # Strays!
        for stray in eps:
            print "Stray ep found; calling udp.anime for aid", stray['aid']
            udp.anime(self.outbound, self.inbound, self.ssid, aid=stray['aid'])
    if files != []:
        unclean = True
        # Strays!
        for stray in files:
            print "Stray file found; calling udp.episode for eid", stray['eid']
            udp.episode(self.outbound, self.inbound, self.ssid, eid=stray['eid'])
    '''This compound condition is to keep the event from monopolizing CPU
    if the user is not logged in.'''
    #if unclean and self.ssid != None:
    #    self.gui_refresh(event)
    #else:
    #    event.Skip()

    def gui_tree_rc(self, event):
    popup = wx.Menu()
    treeitem = event.GetItem()
    treedata = self.tree.GetItemPyData(treeitem)
    if treedata[0] == "a":
        # Right-click on anime
        idd = wx.NewId()
        popup.Append(idd, "Remove anime " + str(treedata[1]))
        self.Bind(wx.EVT_MENU, lambda evt: db.rmaid(treedata[1]), id=idd)
        idd = wx.NewId()
        popup.Append(idd, "Refresh anime " + str(treedata[1]))
        self.Bind(wx.EVT_MENU, lambda evt: udp.anime(self.outbound, self.inbound, self.ssid, aid=treedata[1], invalidatecache=True), id=idd)
    elif treedata[0] == "ue":
        # Right-click on unidentified episode
        idd = wx.NewId()
        popup.Append(idd, "Lookup episode")
        self.Bind(wx.EVT_MENU, lambda evt: udp.episode(self.outbound, self.inbound, self.ssid, aid=treedata[1]), id=idd)
    elif treedata[0] == "e":
        # Right-click on known episode
        idd = wx.NewId()
        popup.Append(idd, "Remove episode " + str(treedata[1]))
        self.Bind(wx.EVT_MENU, lambda evt: db.rmeid(treedata[1]), id=idd)
        idd = wx.NewId()
        popup.Append(idd, "Refresh episode " + str(treedata[1]))
        self.Bind(wx.EVT_MENU, lambda evt: udp.episode(self.outbound, self.inbound, self.ssid, eid=treedata[1], invalidatecache=True), id=idd)
    elif treedata[0] == "f":
        # Right-click on file
        idd = wx.NewId()
        popup.Append(idd, "Remove file " + str(treedata[1]))
        self.Bind(wx.EVT_MENU, lambda evt: db.rmfid(treedata[1]), id=idd)
        idd = wx.NewId()
        popup.Append(idd, "Refresh file " + str(treedata[1]))
        self.Bind(wx.EVT_MENU, lambda evt: udp.file(self.outbound, self.inbound, self.ssid, fid=treedata[1], invalidatecache=True), id=idd)
    idd = wx.NewId()
    popup.Append(idd, "Refresh")
    self.Bind(wx.EVT_MENU, self.gui_refresh, id=idd)
    self.PopupMenu(popup)
    event.Skip()

    def show_settings(self, event): # wxGlade: oaframe.<event_handler>
        print "Showing settings dialog..."
    settings = settingsdialog(self, conf=self.conf)
    settings.ShowModal()
    settings.Destroy()
        event.Skip()

    def gui_filebrowse(self, event): # wxGlade: oaframe.<event_handler>
        print "Showing file chooser..."
    filechooser = wx.FileDialog(self, "Add File(s)", '', '', "All supported filetypes|*.avi;*.mkv;*.mp4|Audio-Video Interleave (*.avi)|*.avi|Matroska (*.mkv)|*.mkv|Quicktime MPEG-4 (*.mp4)|*.mp4", wx.OPEN | wx.FILE_MUST_EXIST | wx.MULTIPLE)
    if filechooser.ShowModal() == wx.ID_OK:
        for file in filechooser.GetPaths():
            self.filelist.InsertStringItem(self.filelist.GetItemCount(), file)
    filechooser.Destroy()
        event.Skip()

    def gui_hash(self, event): # wxGlade: oaframe.<event_handler>
        print "Starting hashing..."
    if self.starthashing.GetValue():
        '''There used to be some threading code here that passed
        references from here to hash.hashthread. FUCK THAT SHIT.
        GTK+, at least, doesn't like doing things like passing
        references between threads. Fortunately, the progress
        dialog is modal anyway.'''
        total = self.filelist.GetItemCount()
        hashes = []
        progdialog = wx.ProgressDialog("Currently hashing...", "Currently hashing...", (total*10)+1, self)
        while self.filelist.GetItemCount() > 0:
            filename = self.filelist.GetItem(0, 0).GetText()
            progdialog.Update((total - self.filelist.GetItemCount())*10, filename)
            hashes.append(hash.ed2k(filename))
            self.filelist.DeleteItem(0)
        progdialog.Update(total*10+1)
        progdialog.Destroy()
        self.starthashing.SetValue(False)
        for h in hashes:
            udp.file(self.outbound, self.inbound, self.ssid, file=h)
        event.Skip()

# end of class oaframe

class OADB(wx.App):
    def OnInit(self):
        wx.InitAllImageHandlers()
        frame1 = oaframe(None, -1, "")
        self.SetTopWindow(frame1)
        frame1.Show()
        return 1

# end of class OADB

if __name__ == "__main__":
    openanidb = OADB(0)
    openanidb.MainLoop()
